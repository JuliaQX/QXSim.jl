var documenterSearchIndex = {"docs":
[{"location":"users_guide/#User's-Guide","page":"User's Guide","title":"User's Guide","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"QXSim generates output files which provide a description of the computations and data required to perform the simulation. There are three output files:","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Parameter file: This YAML file provides informations on the sliced edges and dimensions as well","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"as details of the output amplitudes or sampling method","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"DSL file: The DSL file contains instructions describing the tensor operations involved in","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"performing the contraction","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Data file: The data file contains the numerical values of the initial tensors of the tensor","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"network","category":"page"},{"location":"users_guide/#Parameter-File","page":"User's Guide","title":"Parameter File","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"To distribute the computation over multiple processes and nodes, a number of edges of the tensor network are sliced. The computation is then divided into multiple smaller computations, each having a particular assignment of values on the sliced edges. The details of which edges are sliced and the dimension of these is described in the parameter file. In addition to this, the outputs to use when contracting the network are also described in the parameter file. An example of a parameter file is as follows","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"amplitudes:\n  - \"00\"\n  - \"01\"  \npartitions:\n  parameters:\n    v2: 2\n    v1: 2","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"This tells us there are two edges that will be sliced, each with dimension 2 and that the computation should be performed by setting the outputs to each of the four bitstrings given in the file. In future it will be possible to specify parameter of the sampling method to use for selecting which bitstrings to calculate the amplitude of instead of each being listed.","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The above parameter file will result in the contraction described in the DSL file being performed eight times with different substitutions in each case. The full list of substitutions is","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"using DataFrames\nusing Latexify\ndf = let\n    df = DataFrame(\"v1\" => Int[], \"v2\" => Int[], \"o1\" => String[], \"o2\" => String[])\n    for outs in CartesianIndices((2, 1))\n        for vs in CartesianIndices((2, 2))\n            push!(df,[ vs[2], vs[1], \"o1_$(outs[2])\", \"o2_$(outs[1])\"])\n        end\n    end\n    df\nend\nmdtable(df,latex=false)","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The final scalar output of the four different substitutions for each output set are summed to get the final output amplitude. This means that each of these contractions can be performed independently on different processes/nodes with a reduction operation performed on the scalars resulting from each contraction.","category":"page"},{"location":"users_guide/#DSL-Specification","page":"User's Guide","title":"DSL Specification","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"A Domain Specific Language (DSL) has been defined when enables better separation  of concerns between the components. This DSL describes a contraction over a tensor network to calculate observables of interest in the form of a sequence of instructions which act on individual tensors. This makes it possible to separate the development of the high performance distributed tensor network computation code from that of the higher level contraction planning, circuit and and network manipulation code. For QXSim DSL files the \".tl\" suffix is used for \"Tensor Language\". We will first show a very simple example of a QXSim DSL file and then descibe in detail how each of the instructions work.","category":"page"},{"location":"users_guide/#Example-DSL-file","page":"User's Guide","title":"Example DSL file","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"An example of the DSL generated for the contraction of a two qubit GHZ circuit looks like.","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"# version: 0.1\noutputs 2\nload t1 data_1\nload t2 data_2\nload t3 data_3\nload t4 data_4\nload t5 data_4\nview t13_$v1 t13 3 $v1\ndel t13\nview t14_$v1 t14 1 $v1\ndel t14\nview t12_$v2 t12 1 $v2\ndel t12\nview t14_$v1_$v2 t14_$v1 3 $v2\ndel t14_$v1\nncon t15 $o1 1 t14_$v1_$v2 -1,1,-2\ndel $o1\ndel t14_$v1_$v2\nncon t16 t8 1 t12_$v2 -1,1\ndel t8\ndel t12_$v2\nncon t17 t9 1 t13_$v1 -1,1,-2\ndel t9\ndel t13_$v1\nncon t18 $o2 1 t17 1,-1\ndel $o2\ndel t17\nncon t19 t15 -1,1 t16 1\ndel t15\ndel t16\nncon t20 t19 1 t18 1\ndel t19\ndel t18\nsave t20 output","category":"page"},{"location":"users_guide/#DSL-Format-and-Instructions","page":"User's Guide","title":"DSL Format and Instructions","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The DSL file is a regular ASCII text file with one instruction per line. Lines beginning with # are comments which are ignored (except for the first line which contains version information). The first line should have a version string which specifies the format version. Symbols prefixed by a dollar sign indicate variables which are take different values for each iteration of the computation. An explanation of each instruction follows","category":"page"},{"location":"users_guide/#Outputs","page":"User's Guide","title":"Outputs","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"outputs 2","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"This line indicates that the tensor network has two output tensors. This will create symbols for each of the possible values of these output tensors. For a quantum circuit, measurement is performed the computational basis which means that the possible values for the output tensors are the vectors [1, 0] and [0, 1] corresponding to the  0 rangle and  1 rangle states respectively. For two outputs the following symbols and mappings will be defined","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"o1_0 => [1, 0]\no1_1 => [0, 1]\no2_0 => [1, 0]\no2_1 => [0, 1]","category":"page"},{"location":"users_guide/#Load","page":"User's Guide","title":"Load","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Load instructions define a new tensor symbol using data from the input file. Here the first argument is the name of the new symbol and the second argument is the key to find the data in the input Data File. Mulitple tensor symbols can have the same data associated with them. In the following example both t4 and t5 will have the same data associated with them.","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"load t1 data_1\nload t2 data_2\nload t3 data_3\nload t4 data_4\nload t5 data_4","category":"page"},{"location":"users_guide/#View","page":"User's Guide","title":"View","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"A view instruction creates a new tensor symbol by taking a view of an existing tensor. The first argument is the new symbol name, the second is the symbol of the tesnor to take the view on, the third argument is the dimension and the final value is the particular value for that dimension. An example view command is as follows","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"view t13_$v1 t13 3 $v1","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The $v1 variable will be replaced by a particular value before execution as described in the Parameter File section.","category":"page"},{"location":"users_guide/#Delete","page":"User's Guide","title":"Delete","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The del instructions marks a particular tensor for deletion and indicates that it will not be used for the rest of that contraction.","category":"page"},{"location":"users_guide/#Contraction","page":"User's Guide","title":"Contraction","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The ncon instruction specificies a pairwise contraction of tensors. An example contraction command is as follows","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"ncon t15 $o1 1 t14_$v1_$v2 -1,1,-2","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Which indicates that the $o1 tensor should be contracted with the t14_$v1_v2 tensor to get the t15 tensor. The contraction should be performed over the only rank of the $o1 tensor and the second rank of the t14_$v1_$v2 tensor. The notation used for specifying which indices to contract over uses the convention that negative indices indicate that this rank will remain and  repeated positive indices indicate ranks that are contracted over, similar to Einstein notation. For the case where one of the tensors is a scalar a 0 is used as a placeholder for the indices. For example if t1 is a scalar tensor and t2 is a matrix, the multiplication of the matrix by the scalar can be expressed as","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"ncon t3 t1 0 t2 -1,-2","category":"page"},{"location":"users_guide/#Save","page":"User's Guide","title":"Save","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The save instruction indicates that the given tensor is an output from the contraction and provides a label for this. The value of this tensor will then be used in a reduction operation and/or written to the output file.","category":"page"},{"location":"users_guide/#Data-File","page":"User's Guide","title":"Data File","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The data file is a JLD file and contains the numerical values of the initial tensors. Each tensor is stored as a multi-dimensional array with a data label that is referenced in load commands of the DSL file.","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"MIT License","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"Copyright (c) 2021 QuantEx team","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"QXSim is a Julia package and can be installed using Julia's inbuilt package manager from the Julia REPL using.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"import Pkg\nPkg.install(\"QXSim\")","category":"page"},{"location":"getting_started/#Example-usage","page":"Getting Started","title":"Example usage","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"An example of how QXSim can be used to calculate a set of amplitudes for small GHZ preparation circuit looks like","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using QXSim\nusing QXSim.Circuits\nusing QXTn\nusing QXGraph\n\n# Create ghz circuit\ncirc = create_ghz_circuit(3)\n\n# Convert the circuit to a tensor network circuit\ntnc = convert_to_tnc(circ)\n\n# Find a good contraction plan\nplan = quickbb_contraction_plan(tnc)\n\n# Contract the network using this plan to find the given amplitude for different outputs\n@show QXSim.single_amplitude(tnc, plan, \"000\")\n@show QXSim.single_amplitude(tnc, plan, \"111\")\n@show QXSim.single_amplitude(tnc, plan, \"100\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only recommended for small test cases. For larger scale runs one can call the generate_simulation_files which will do the conversion to a network, find the contraction plan and create output files describing the required calculations. For example","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using QXSim\nusing QXSim.Circuits\n\n# Create ghz circuit\ncirc = create_ghz_circuit(3)\n\ngenerate_simulation_files(circ, 2, \"ghz_3\", 4)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"will generate the files:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"ghz_3.tl: A DSL file with instructions\nghz_3.jld: A data file with tensors\nghz_3.yml: A parameter file with parameters controlling the simulation","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"These can be used as input to QXRun to run the simulation on HPC clusters to calculate the amplitudes for 4 bitstrings sampled uniformly.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QXSim","category":"page"},{"location":"#QXSim","page":"Home","title":"QXSim","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"QXSim is a Julia package for simulating quantum circuits using tensor network approaches and targetting large distibuted memory clusters with hardware accelerators. It was developed as part of the QuantEx project, one of the individual software projects of WP8 of PRACE 6IP.","category":"page"},{"location":"","page":"Home","title":"Home","text":"QXSim ties together a number of other Julia packages which are also part of the QuantEx project. These include QXZoo for generating  generating and manipulating quantum circuits, QXTn for representing and manipulating tensor networks, QXGraph which implements a number of graph algorithms for finding good contraction plans and finally QXRun which is designed to run on large distributed clusters and carry out the computations using input files generated using QXSim.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The design and implementation of QXSim and related packages was inspired by many other frameworks and packages including ITensors, TensorOperations.jl, Yao.jl, TAL-SH and ExaTN.","category":"page"},{"location":"#Where-to-begin","page":"Home","title":"Where to begin","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For getting QXSim installed and setup, see the Getting Started section which has instructions on how to install QXSim and some hello world examples. The \"Tutorials\" section contains some more indepth examples and the \"Users Guide\" has more details of the design and structure of QXSim.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"users_guide.md\"]\nDepth = 2","category":"page"}]
}
