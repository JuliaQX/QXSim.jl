var documenterSearchIndex = {"docs":
[{"location":"users_guide/#User's-Guide","page":"User's Guide","title":"User's Guide","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"QXTools generates output files which provide a description of the computations and data required to perform a simulation. There are three output files:","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Parameter file: This YAML file provides informations on the sliced edges and dimensions as well","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"as details of the output amplitudes or sampling method","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"DSL file: The DSL file contains instructions describing the tensor operations involved in","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"performing the contraction","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Data file: The data file contains the numerical values of the initial tensors of the tensor","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"network","category":"page"},{"location":"users_guide/#Parameter-File","page":"User's Guide","title":"Parameter File","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"To distribute the computation over multiple processes and nodes, a number of edges of the tensor network are sliced. The computation is then divided into multiple smaller computations, each having a particular assignment of values on the sliced edges. The details of which edges are sliced and the dimension of these is described in the parameter file. In addition to this, the outputs to use when contracting the network are also described in the parameter file. An example of a parameter file is as follows","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"amplitudes:\n  - \"00\"\n  - \"01\"\npartitions:\n  parameters:\n    v2: 2\n    v1: 2","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"This tells us there are two edges that will be sliced, each with dimension 2 and that the computation should be performed by setting the outputs to each of the four bitstrings given in the file. In future it will be possible to specify parameter of the sampling method to use for selecting which bitstrings to calculate the amplitude of instead of each being listed.","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The above parameter file will result in the contraction described in the DSL file being performed eight times with different substitutions in each case. The full list of substitutions is","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"using DataFrames\nusing Latexify\ndf = let\n    df = DataFrame(\"v1\" => Int[], \"v2\" => Int[], \"o1\" => String[], \"o2\" => String[])\n    for outs in CartesianIndices((2, 1))\n        for vs in CartesianIndices((2, 2))\n            push!(df,[ vs[2], vs[1], \"o1_$(outs[2])\", \"o2_$(outs[1])\"])\n        end\n    end\n    df\nend\nmdtable(df,latex=false)","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The final scalar output of the four different substitutions for each output set are summed to get the final output amplitude. This means that each of these contractions can be performed independently on different processes/nodes with a reduction operation performed on the scalars resulting from each contraction.","category":"page"},{"location":"users_guide/#DSL-Specification","page":"User's Guide","title":"DSL Specification","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"A Domain Specific Language (DSL) has been defined when enables better separation of concerns between the components. This DSL describes a contraction over a tensor network to calculate observables of interest in the form of a sequence of instructions which act on individual tensors. This makes it possible to separate the development of the high performance distributed tensor network computation code from that of the higher level contraction planning, circuit and and network manipulation code. For QXTools DSL files the \".qx\" suffix is used for \"Tensor Language\". We will first show a very simple example of a QXTools DSL file and then descibe in detail how each of the instructions work.","category":"page"},{"location":"users_guide/#Example-DSL-file","page":"User's Guide","title":"Example DSL file","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"An example of the DSL generated for the contraction of a two qubit GHZ circuit looks like.","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"# version: 0.3.0\n# Determination of contraction plan :\n#   Method used : flow cutter\n#   Time allocated : 10\n#   Seed used : -1\n#   Returned metadata :\n#     1 : c min degree heuristic\n#     2 : c status 3 1618911763948\n#     3 : c min shortcut heuristic\n#     4 : c run with 0.0/0.1/0.2 min balance and node_min_expansion in endless loop with varying seed\n#   Hypergraph used : true\n#   Hyperedge contraction method : Netcon where possible, min fill heuristic otherwise.\n# Slicing :\n#   Method used : greedy treewidth deletion\n#   Edges sliced : 2\n#   Score fucntion used : direct_treewidth\n#   Treewidths after slicing consecutive edges : [1, 0]\noutputs 2\nload t1 data_1\nload t2 data_2\nload t3 data_3\nload t4 data_4\nload t5 data_4\nview o1_s o1 1 v1\nview t3_s t3 1 v1\nview t2_s t2 3 v1\nview t1_s t1 1 v1\nview t5_s t5 1 v2\nview t2_s_s t2_s 2 v2\nncon I1 2,3 t2_s_s 1,2,3 o2 1\nncon I2 1 t1_s 1,2 t4 2\nncon t8 1 o1_s 1 t3_s 1\nncon t9 1,3 t8 1 t5_s 3\nncon t10 1 t9 1,3 I1 3,1\nncon t11 0 t10 1 I2 1\nsave t11 output","category":"page"},{"location":"users_guide/#DSL-Format-and-Instructions","page":"User's Guide","title":"DSL Format and Instructions","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The DSL file is a regular ASCII text file with one instruction per line. Lines beginning with # are comments which are ignored (except for the first line which contains version information). The first line has a version string which specifies the format version. Comments following the first line contain metadata about the methods used to determine the contraction plan used and which edges to slice.","category":"page"},{"location":"users_guide/#Outputs","page":"User's Guide","title":"Outputs","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"outputs 2","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"This line indicates that the tensor network has two output tensors. These tensors are represented in subsequent DSL commands by symbols in the format o{i}, where {i} is the index of the given output. To contract the tensor network with different values for the output tensors, the data these symbols point to needs to be updated.","category":"page"},{"location":"users_guide/#Load","page":"User's Guide","title":"Load","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Load instructions define a new tensor symbol using data from the input file. Here the first argument is the name of the new symbol and the second argument is the key to find the data in the input Data File. It is normal that multiple tensor symbols have the same data associated with them, e.g. multiple occurrences of the same gate. In the following example both t4 and t5 both used the data labeled data_4 in the input [Data File][@ref]","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"load t1 data_1\nload t2 data_2\nload t3 data_3\nload t4 data_4\nload t5 data_4","category":"page"},{"location":"users_guide/#View","page":"User's Guide","title":"View","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"A view instruction creates a new tensor symbol by taking a view of an existing tensor. The first argument is the new symbol name, the second is the symbol of the tensor to take the view of, the third argument is the dimension and the final value is the particular value for that dimension. An example view command is as follows","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"view t13_s t13 3 v1","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The v1 variable will be replaced by a particular value before execution as described in the Parameter File section.","category":"page"},{"location":"users_guide/#Contraction","page":"User's Guide","title":"Contraction","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The ncon instruction specifies a pairwise contraction of tensors. An example contraction command is as follows","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"ncon t15 2,3 o1 1 t14_s_s 2,1,3","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Which indicates that the o1 tensor should be contracted with the t14_s_s tensor to get the t15 tensor. The contraction should be performed over the only rank of the o1 tensor and the second rank of the t14_s_s tensor. Einstein summation notation is used for for specifying which indices to contract over. This convention uses repeated indices on the right hand side to indicate that those indices should be contracted over. In the above, the 1 index appears twice on the right hand side which indicates that this index should be contracted over. For the case where one of the tensors is a scalar, a 0 is used as a placeholder. For example if t1 is a scalar tensor and t2 is a matrix, the multiplication of the matrix by the scalar can be expressed as","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"ncon t3 1,2 t1 0 t2 1,2","category":"page"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"Batched contractions (sometimes called hyper-contractions) are also supported. This is where the same index is repeated on the right hand side and also appears on the left hand side.","category":"page"},{"location":"users_guide/#Save","page":"User's Guide","title":"Save","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The save instruction indicates that the given tensor is an output from the contraction and provides a label for this. The value of this tensor will then be used in a reduction operation and/or written to the output file.","category":"page"},{"location":"users_guide/#Data-File","page":"User's Guide","title":"Data File","text":"","category":"section"},{"location":"users_guide/","page":"User's Guide","title":"User's Guide","text":"The data file is a JLD file and contains the numerical values of the initial tensors. Each tensor is stored as a multi-dimensional array with a data label that is referenced in load commands of the DSL file.","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"MIT License","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"Copyright (c) 2021 QuantEx team","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"QXTools is a Julia package and can be installed using Julia's inbuilt package manager from the Julia REPL using.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"import Pkg\nPkg.add(\"QXTools\")","category":"page"},{"location":"getting_started/#Example-usage","page":"Getting Started","title":"Example usage","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"An example of how QXTools can be used to calculate a set of amplitudes for small GHZ preparation circuit looks like","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using QXTools\nusing QXTools.Circuits\nusing QXTns\nusing QXGraphDecompositions\n\n# Create ghz circuit\ncirc = create_ghz_circuit(3)\n\n# Convert the circuit to a tensor network circuit\ntnc = convert_to_tnc(circ)\n\n# Find a good contraction plan\nplan = quickbb_contraction_plan(tnc)\n\n# Contract the network using this plan to find the given amplitude for different outputs\n@show QXTools.single_amplitude(tnc, plan, \"000\")\n@show QXTools.single_amplitude(tnc, plan, \"111\")\n@show QXTools.single_amplitude(tnc, plan, \"100\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This is only recommended for small test cases. For larger scale runs one can call the generate_simulation_files which will do the conversion to a network, find the contraction plan and create output files describing the required calculations. For example","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using QXTools\nusing QXTools.Circuits\n\n# Create ghz circuit\ncirc = create_ghz_circuit(3)\n\ngenerate_simulation_files(circ, 2, \"ghz_3\", 4)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"will generate the files:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"ghz_3.qx: A DSL file with instructions\nghz_3.jld2: A data file with tensors\nghz_3.yml: A parameter file with parameters controlling the simulation","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"These can be used as input to QXContexts to run the simulation on HPC clusters to calculate the amplitudes for 4 bitstrings sampled uniformly.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QXTools","category":"page"},{"location":"#QXTools","page":"Home","title":"QXTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"QXTools is a Julia package for simulating quantum circuits using tensor network approaches. It targets large distributed memory clusters with hardware accelerators. It was developed as part of the QuantEx project, one of the individual software projects of WP8 of PRACE 6IP.","category":"page"},{"location":"","page":"Home","title":"Home","text":"QXTools ties together a number of other Julia packages which are also part of the QuantEx project. These include QXZoo for generating and manipulating quantum circuits, QXTns for representing and manipulating tensor networks, QXGraphDecompositions which implements a number of graph algorithms for finding good contraction plans and finally QXContexts which is designed to run on large distributed clusters and carry out the computations using input files generated using QXTools.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The design and implementation of QXTools and related packages was inspired by many other frameworks and packages including ITensors, TensorOperations.jl, OMEinsum.jl, Yao.jl, TAL-SH and ExaTN.","category":"page"},{"location":"#Where-to-begin","page":"Home","title":"Where to begin","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For getting QXTools installed and setup, see the Getting Started section which has instructions on how to install QXTools and some hello world examples. The \"Tutorials\" section contains some more in-depth examples and the \"Users Guide\" has more details of the design and structure of QXTools.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"users_guide.md\"]\nDepth = 2","category":"page"}]
}
