@startuml quantex_container_diagram_c4
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Component.puml
' uncomment the following line and comment the first to use locally
' !include C4_Component.puml

title Component diagram for QXSim

Person(personAlias, "User", "Researcher wishing to simulate circuit")
/'System_Ext(alt_backend, "Alt. backend", "External quantum backend simulator/hardware")
'/

Container(qxtn, "QXTN", "Julia package", "Tensor Network data structures and manipulation")
Container(qxzoo, "QXZoo", "Julia package", "Quantum circuit structures and use-case algorithms")
Container(qxgraph, "QXGraph", "Julia package", "Graph algorithms for TN")
Container(qxrun, "QXRun", "Julia package", "Tensor network operations on target devices")

Container_Boundary(QXSim, "QXSim") {
    Component(Controller, "Controller", "Julia module", "Handles internal & external operation control and state")

    Component(ExpBuilder, "ExpBuilder", "Julia module", "Handles and defines E2E operations from user input to evaluations")

    Component(cct_tn, "CCT_TN", "Julia module", "Allows conversion between QXZoo circuit and QXTN network")
    
    Component(tn_graph, "TN_Graph", "Julia module", "Performs graph analysis on given TN")
    
    Component(tn_run, "TN_Run", "Julia module", "Orchestrates decomposition of problem over available resources")
    
    ComponentDb(results, "ResultsDB", "DB", "Store results")
}

Rel(personAlias, Controller, "Choose problem to simulate", "Name and parameters for E2E problem")
Rel_R(ExpBuilder, Controller, "Experiment data", "Struct of data to create simulation")
Rel_R(Controller, ExpBuilder, "User data", "Forwarded data from user")

Rel(Controller, cct_tn, "", "")
Rel(cct_tn, qxzoo, "", "")
Rel(qxzoo, cct_tn, "", "")
Rel(cct_tn, qxtn, "", "")
Rel(qxtn, cct_tn, "", "")
Rel(cct_tn, Controller, "TN", "Tensor network of problem")

Rel(Controller, tn_graph, "TN", "TN to analyse for contractions")
Rel(tn_graph, Controller, "Contraction plan", "Optimal contraction plan")
Rel(tn_graph, qxgraph, "Parsed TN", "Required TN struct and params")
Rel(qxgraph, tn_graph, "Contraction plan", "Optimal contraction plan")

Rel_L(Controller, results, "Data", "Resulting data from simulation")
/'
Rel(tn_graph, qxtn, "", "")
Rel(qxtn, tn_graph, "", "")

'/

Rel(Controller, tn_run, "TN & cont. plan", "")
Rel(tn_run, Controller, "Results data", "")
Rel(tn_run, qxrun, "TN & cont. plan", "")
Rel(qxrun, tn_run, "Resulting data", "")

/'
Rel(tn_run, qxtn, "", "")
Rel(qxtn, tn_run, "", "")
Rel(tn_run, qxgraph, "", "")
Rel(qxgraph, tn_run, "", "")
'/

/'
Rel_L(Circuits, Gates, "Uses", "Matrix, Struct, Symbols")
Rel_R(Circuits, Translators, "Circuit internal representation", "Structs")
Rel_R(Translators, qxtn, "Quantum Circuit", "Structs or JSON + HDF5")

Circuits ..> GateCache: Gate internal representation and numerical representation, [Matrix, Struct, Symbols]
Translators .[#66AADD].> alt_backend: Optional backend circuit format
'/

@enduml
